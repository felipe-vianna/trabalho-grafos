legenda:
  OK: finalizado
  ++: finalizado parcialmente (ex: falta implementar c/ lista)

OBS: Apos a leitura do arquivo txt, em todos os casos tratei os indices dos vertices iniciando em 0
     (talvez precisemos mudar)

-------------------------
Trabalho 1

1. Entrada / 3. Representação
  [OK] ler como matriz
  [OK] ler como lista/vetor (pode ser que haja implementacao mais eficiente)

2. Saída
  [OK] número de vértices
  [OK] número de arestas
  [OK] grau mínimo
  [OK] grau máximo
  [OK] grau médio
  [OK] mediana de grau
  [OK] info componentes conexas

4. Busca
  [OK] largura
  [OK] profundidade
  [OK] gerar arvore
  [OK] imprimir arvore

5. Distancias e diametros
  [OK] distancia
  [OK] diametro

6. Componentes conexas
  [OK] descobrir comp con
  [OK] numero de comp con
  [OK] tamanho das comp con (num vertices)
  [OK] lista com os vertices das comp con
  [OK] listar comp con de acordo com o tamanho (num vertices)

-------------------------
Trabalho 2

  Obrigatorio
  [OK] carregar grafos com pesos
  [OK] carregar grafos direcionados
  [OK] distancia entre dois vertices (juntando bfs, dijkstra e bellman-ford)
  [OK] dijkstra
  [OK] Floyd-warshall
  [OK] MST (Prim)

  Melhorias
  [  ] fazer comentarios no cabecalho de cada funcao (entrada, saida, etc)
  [  ] verificar qual o peso maximo das arestas para poder definir o tipo dos dados da matriz de adj
  [  ] tratar caso em que vertice do grafo nao possui vizinhos (read_lst e read_mtx)
  [OK] alterar read para conseguir ler grafos com mais de um elemento na primeira linha do arquivo txt
  [OK] unificar breadth_search_lst e breadth_search_mtx
  [OK] unificar depth_search
  [  ] implementar opcao de zero_indexing no grafo
  [OK] modificar nome do atributo Graph.graph para Graph.adjac